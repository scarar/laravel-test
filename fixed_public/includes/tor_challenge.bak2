<?php
/**
 * File: tor_challenge.php
 * Purpose: Handles TOR detection and math CAPTCHA implementation
 * Version: Testing/Development
 */
class TORChallengeHandler {
    private $session;
    private $formData;
    private const MAX_ATTEMPTS = 3;
    private const CHALLENGE_TIMEOUT = 300; // 5 minutes
    private $torExitNodes = [];
    private const SESSION_KEY = 'tor_challenge_completed';
    
    public function __construct() {
        if (session_status() === PHP_SESSION_NONE) {
            session_start();
        }
        
        $this->initializeSession();
    }
    
    private function initializeSession() {
        if (!isset($_SESSION['tor_challenge_attempts'])) {
            $_SESSION['tor_challenge_attempts'] = 0;
        }
        
        if (!isset($_SESSION['tor_challenge_timestamp'])) {
            $_SESSION['tor_challenge_timestamp'] = time();
        }
        
        if (!isset($_SESSION[self::SESSION_KEY])) {
            $_SESSION[self::SESSION_KEY] = false;
        }
    }
    
    public function getClientIP() {
        $headers = [
            'HTTP_CLIENT_IP',
            'HTTP_X_FORWARDED_FOR',
            'HTTP_X_FORWARDED',
            'HTTP_X_CLUSTER_CLIENT_IP',
            'HTTP_FORWARDED_FOR',
            'HTTP_FORWARDED',
            'REMOTE_ADDR'
        ];

        foreach ($headers as $header) {
            if (isset($_SERVER[$header])) {
                $ips = array_map('trim', explode(',', $_SERVER[$header]));
                foreach ($ips as $ip) {
                    if (filter_var($ip, FILTER_VALIDATE_IP,
                        FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE)) {
                        return $ip;
                    }
                }
            }
        }
        
        return $_SERVER['REMOTE_ADDR'];
    }
    
    public function isTorUser($ip) {
        $clientIP = $this->getClientIP();
        
        // For testing: Always return true to force challenge display
        // Remove this line and uncomment the code below for production
        return true;
        
        /* Production TOR Detection Code
        try {
            $context = stream_context_create([
                'http' => [
                    'timeout' => 5,
                    'ignore_errors' => true,
                    'user_agent' => 'TOR Challenge Verification/1.0'
                ]
            ]);
            
            $torExitList = @file_get_contents(
                "https://check.torproject.org/exit-addresses",
                false,
                $context
            );
            
            if ($torExitList !== false) {
                if (strpos($torExitList, $clientIP) !== false) {
                    return true;
                }
                
                // Store exit nodes for future checks
                preg_match_all('/ExitAddress\s+(\d+\.\d+\.\d+\.\d+)/', $torExitList, $matches);
                if (!empty($matches[1])) {
                    $this->torExitNodes = $matches[1];
                }
            }
            
            // Check TOR-specific headers
            $torHeaders = [
                'HTTP_X_TOR',
                'HTTP_X_FORWARDED_FOR_TOR',
                'HTTP_TOR_EXIT',
                'HTTP_TOR'
            ];
            
            foreach ($torHeaders as $header) {
                if (isset($_SERVER[$header])) {
                    return true;
                }
            }
            
        } catch (Exception $e) {
            error_log("TOR Check Error: " . $e->getMessage());
        }
        
        return false;
        */
    }
    
    public function requiresChallenge($ip) {
        return $this->isTorUser($ip) && !$_SESSION[self::SESSION_KEY];
    }
    
    public function generateChallenge() {
        $num1 = rand(1, 20);
        $num2 = rand(1, 20);
        $operations = ['+', '-', '*'];
        $operation = $operations[array_rand($operations)];
        
        $question = "$num1 $operation $num2";
        $answer = eval("return $question;");
        
        $_SESSION['tor_challenge'] = [
            'question' => $question,
            'answer' => $answer,
            'timestamp' => time()
        ];
        
        return $question;
    }
    
    public function validateAnswer($userAnswer) {
        if (!isset($_SESSION['tor_challenge']['answer'])) {
            return false;
        }
        
        // Check for timeout
        if (time() - $_SESSION['tor_challenge_timestamp'] > self::CHALLENGE_TIMEOUT) {
            unset($_SESSION['tor_challenge']);
            return false;
        }
        
        $_SESSION['tor_challenge_attempts']++;
        
        // Check maximum attempts
        if ($_SESSION['tor_challenge_attempts'] > self::MAX_ATTEMPTS) {
            unset($_SESSION['tor_challenge']);
            $_SESSION['tor_challenge_attempts'] = 0;
            return false;
        }
        
        $isCorrect = intval($userAnswer) === $_SESSION['tor_challenge']['answer'];
        
        if ($isCorrect) {
            $_SESSION['tor_challenge_attempts'] = 0;
            unset($_SESSION['tor_challenge']);
            $_SESSION[self::SESSION_KEY] = true;
        }
        
        return $isCorrect;
    }
    
    public function renderChallengeForm($formData = []) {
        $this->formData = $formData;
        $question = $this->generateChallenge();
        
        ob_start();
        ?>
        <div class="tor-challenge-container">
            <h2>Security Verification Required</h2>
            <p>You are accessing this site through TOR. Please solve this math problem to continue:</p>
            
            <?php if ($_SESSION['tor_challenge_attempts'] > 0): ?>
                <div class="challenge-attempts">
                    Attempts remaining: <?php echo self::MAX_ATTEMPTS - $_SESSION['tor_challenge_attempts']; ?>
                </div>
            <?php endif; ?>
            
            <form method="post" action="" class="tor-challenge-form">
                <label for="math-answer" class="challenge-question">
                    <?php echo htmlspecialchars($question); ?> = ?
                </label>
                
                <input type="number" 
                       id="math-answer"
                       name="tor_answer" 
                       required 
                       autocomplete="off" 
                       class="challenge-input"
                       aria-label="Enter your answer">
                
                <?php $this->renderHiddenFields(); ?>
                
                <button type="submit" class="submit-btn">Submit Answer</button>
            </form>
            
            <div class="challenge-info">
                <p>This math challenge helps prevent automated access through TOR.</p>
                <p>You have <?php echo self::CHALLENGE_TIMEOUT / 60; ?> minutes to complete this challenge.</p>
            </div>
        </div>
        <?php
        return ob_get_clean();
    }
    
    private function renderHiddenFields() {
        foreach ($this->formData as $key => $value) {
            if ($key !== 'tor_answer' && !is_array($value)) {
                echo '<input type="hidden" name="' . 
                     htmlspecialchars($key) . 
                     '" value="' . 
                     htmlspecialchars($value) . 
                     '">';
            }
        }
    }
    
    public function resetChallengeStatus() {
        $_SESSION[self::SESSION_KEY] = false;
        $_SESSION['tor_challenge_attempts'] = 0;
        unset($_SESSION['tor_challenge']);
    }
    
    public function hasTimedOut() {
        return isset($_SESSION['tor_challenge_timestamp']) && 
               (time() - $_SESSION['tor_challenge_timestamp'] > self::CHALLENGE_TIMEOUT);
    }
    
    public function getRemainingAttempts() {
        return self::MAX_ATTEMPTS - ($_SESSION['tor_challenge_attempts'] ?? 0);
    }
}
